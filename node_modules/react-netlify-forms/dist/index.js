function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var GoogleRecaptcha = _interopDefault(require('react-google-recaptcha'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var NetlifyFormContext = React.createContext();
NetlifyFormContext.displayName = 'NetlifyFormContext';
var NetlifyFormProvider = function NetlifyFormProvider(_ref) {
  var children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["children"]);

  return /*#__PURE__*/React.createElement(NetlifyFormContext.Provider, {
    value: _extends({}, props)
  }, children);
};
function useNetlifyFormContext() {
  return React.useContext(NetlifyFormContext);
}

var Honeypot = function Honeypot(_ref) {
  var _ref$label = _ref.label,
      label = _ref$label === void 0 ? "Leave the following field empty:" : _ref$label,
      props = _objectWithoutPropertiesLoose(_ref, ["label"]);

  var _useNetlifyFormContex = useNetlifyFormContext(),
      handleChange = _useNetlifyFormContex.handleChange,
      honeypotName = _useNetlifyFormContex.honeypotName;

  return /*#__PURE__*/React.createElement("p", {
    hidden: true
  }, /*#__PURE__*/React.createElement("label", null, label, ' ', /*#__PURE__*/React.createElement("input", _extends({
    type: "text"
  }, props, {
    name: honeypotName,
    onChange: handleChange
  }))));
};

var encodeFormData = function encodeFormData(data) {
  var formData = new FormData();

  for (var _i = 0, _Object$keys = Object.keys(data); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    formData.append(key, data[key]);
  }

  return formData;
};
var isFunction = function isFunction(x) {
  return typeof x === 'function';
};
var isEmptyChildren = function isEmptyChildren(x) {
  return React.Children.count(x) === 0;
};

function NetlifyFormReducer (state, action) {
  var type = action.type,
      payload = action.payload;

  switch (type) {
    case 'CHANGE_FORM_DATA':
      {
        var _extends2;

        var name = payload.name,
            value = payload.value,
            _type = payload.type;
        return _extends(_extends({}, state), {}, {
          values: _extends(_extends({}, state.values), {}, (_extends2 = {}, _extends2[name] = _type !== 'checkbox' ? value : payload.checked, _extends2))
        });
      }

    case 'RESET_FORM':
      {
        var initialData = payload;
        return _extends(_extends({}, state), {}, {
          values: initialData
        });
      }

    case 'SET_SUCCESS':
      return _extends(_extends({}, state), {}, {
        success: true,
        error: false,
        submitting: false,
        submitted: true
      });

    case 'SET_ERROR':
      return _extends(_extends({}, state), {}, {
        success: false,
        error: true,
        submitting: false
      });

    case 'SET_SUBMITTING':
      return _extends(_extends({}, state), {}, {
        submitting: true
      });

    case 'SET_HONEYPOT_NAME':
      return _extends(_extends({}, state), {}, {
        honeypotName: payload
      });

    case 'ENABLE_RECAPTCHA':
      return _extends(_extends({}, state), {}, {
        recaptchaEnabled: payload
      });

    default:
      throw new Error("Action type \"" + type + "\" is not defined.");
  }
}

var NetlifyFormComponent = function NetlifyFormComponent(_ref) {
  var children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["children"]);

  var context = useNetlifyFormContext();
  var formRef = context.formRef,
      formName = context.formName,
      formAction = context.formAction,
      honeypotName = context.honeypotName,
      recaptchaEnabled = context.recaptchaEnabled,
      handleSubmit = context.handleSubmit,
      handleReset = context.handleReset;
  var netlifyProps = {};

  if (honeypotName) {
    netlifyProps['data-netlify-honeypot'] = honeypotName;
  }

  if (recaptchaEnabled) {
    netlifyProps['data-netlify-recaptcha'] = true;
  }

  return /*#__PURE__*/React.createElement("form", _extends({
    ref: formRef,
    method: "post",
    name: formName,
    action: formAction,
    onSubmit: handleSubmit,
    onReset: handleReset,
    "data-netlify": true
  }, netlifyProps, props), /*#__PURE__*/React.createElement("input", {
    type: "hidden",
    name: "form-name",
    value: formName
  }), children ? isFunction(children) ? children(context) : !isEmptyChildren(children) ? children : null : null);
};

var useNetlifyForm = function useNetlifyForm(_ref) {
  var _ref$name = _ref.name,
      name = _ref$name === void 0 ? 'Form' : _ref$name,
      _ref$action = _ref.action,
      action = _ref$action === void 0 ? '' : _ref$action,
      _ref$honeypotName = _ref.honeypotName,
      honeypotName = _ref$honeypotName === void 0 ? '' : _ref$honeypotName,
      _ref$enableRecaptcha = _ref.enableRecaptcha,
      enableRecaptcha = _ref$enableRecaptcha === void 0 ? false : _ref$enableRecaptcha,
      _ref$onSuccess = _ref.onSuccess,
      onSuccess = _ref$onSuccess === void 0 ? function () {} : _ref$onSuccess,
      _ref$onFailure = _ref.onFailure,
      onFailure = _ref$onFailure === void 0 ? function () {} : _ref$onFailure;
  var initialValues = {};
  var initialState = {
    success: false,
    error: false,
    submitting: false,
    submitted: false,
    response: null,
    values: initialValues,
    formName: name,
    formAction: action,
    honeypotName: honeypotName,
    recaptchaEnabled: enableRecaptcha,
    recaptchaInvisible: false
  };

  var _React$useReducer = React.useReducer(NetlifyFormReducer, initialState),
      state = _React$useReducer[0],
      dispatch = _React$useReducer[1];

  var formRef = React.useRef(null);
  var recaptchaRef = React.useRef(null);

  var handleChange = function handleChange(_ref2) {
    var _ref2$target = _ref2.target,
        name = _ref2$target.name,
        value = _ref2$target.value,
        files = _ref2$target.files;
    dispatch({
      type: 'CHANGE_FORM_DATA',
      payload: files != null && files.length > 0 ? {
        name: name,
        value: files[0]
      } : {
        name: name,
        value: value
      }
    });
  };

  var handleReset = function handleReset() {
    dispatch({
      type: 'RESET_FORM',
      payload: initialValues
    });
  };

  var handleSubmit = function handleSubmit(event, values) {
    if (event === void 0) {
      event = null;
    }

    if (values === void 0) {
      values = {};
    }

    try {
      var _temp4 = function _temp4(_result) {
        if (_exit2) return _result;
        dispatch({
          type: 'SET_SUBMITTING'
        });
        return Promise.resolve(fetch('/', {
          method: 'POST',
          body: encodeFormData(formData)
        })).then(function (response) {
          var context = {
            state: state,
            formRef: formRef,
            recaptchaRef: recaptchaRef
          };

          if (response.status !== 200) {
            dispatch({
              type: 'SET_ERROR'
            });
            return onFailure(response, context);
          }

          dispatch({
            type: 'SET_SUCCESS'
          });
          return onSuccess(response, context);
        });
      };

      var _exit2 = false;

      if (event) {
        event.preventDefault();
      }

      var formData = _extends(_extends({
        'form-name': state.formName
      }, values), state.values);

      var _temp5 = function () {
        if (state.recaptchaEnabled) {
          var _temp6 = function _temp6(recaptchaValue) {
            formData['g-recaptcha-response'] = recaptchaValue;
          };

          if (recaptchaRef.current === null) {
            throw new Error('reCAPTCHA is enabled but reference not found, make sure you render the reCAPTCHA-component somewhere.');
          }

          var isRecaptchaInvisible = recaptchaRef.current.props.size === 'invisible';
          return isRecaptchaInvisible ? Promise.resolve(recaptchaRef.current.executeAsync()).then(_temp6) : _temp6(recaptchaRef.current.getValue());
        }
      }();

      return Promise.resolve(_temp5 && _temp5.then ? _temp5.then(_temp4) : _temp4(_temp5));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var setHoneypotName = React.useCallback(function (ref) {
    return dispatch({
      type: 'SET_HONEYPOT_NAME',
      payload: ref
    });
  }, []);
  var enableRecaptchaHandler = React.useCallback(function (enable) {
    return dispatch({
      type: 'ENABLE_RECAPTCHA',
      payload: enable
    });
  }, []);
  return _extends(_extends({}, state), {}, {
    handleChange: handleChange,
    handleSubmit: handleSubmit,
    handleReset: handleReset,
    setHoneypotName: setHoneypotName,
    enableRecaptcha: enableRecaptchaHandler,
    formRef: formRef,
    recaptchaRef: recaptchaRef
  });
};
var NetlifyForm = function NetlifyForm(_ref3) {
  var children = _ref3.children,
      formProps = _ref3.formProps,
      props = _objectWithoutPropertiesLoose(_ref3, ["children", "formProps"]);

  var context = useNetlifyForm(props);
  return /*#__PURE__*/React.createElement(NetlifyFormProvider, context, /*#__PURE__*/React.createElement(NetlifyFormComponent, formProps, children));
};

var Recaptcha = function Recaptcha(_ref) {
  var _ref$siteKey = _ref.siteKey,
      siteKey = _ref$siteKey === void 0 ? '' : _ref$siteKey,
      _ref$invisible = _ref.invisible,
      invisible = _ref$invisible === void 0 ? false : _ref$invisible;

  var _useNetlifyFormContex = useNetlifyFormContext(),
      recaptchaRef = _useNetlifyFormContex.recaptchaRef;

  return invisible ? /*#__PURE__*/React.createElement(GoogleRecaptcha, {
    sitekey: siteKey,
    ref: recaptchaRef,
    size: "invisible"
  }) : /*#__PURE__*/React.createElement(GoogleRecaptcha, {
    sitekey: siteKey,
    ref: recaptchaRef
  });
};

exports.Honeypot = Honeypot;
exports.NetlifyForm = NetlifyForm;
exports.NetlifyFormComponent = NetlifyFormComponent;
exports.NetlifyFormContext = NetlifyFormContext;
exports.NetlifyFormProvider = NetlifyFormProvider;
exports.Recaptcha = Recaptcha;
exports.useNetlifyForm = useNetlifyForm;
exports.useNetlifyFormContext = useNetlifyFormContext;
//# sourceMappingURL=index.js.map
