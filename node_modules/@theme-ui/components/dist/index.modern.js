import styled from '@emotion/styled';
import { css, get } from '@theme-ui/css';
import { createShouldForwardProp } from '@styled-system/should-forward-prop';
import space from '@styled-system/space';
import color from '@styled-system/color';
import React from 'react';
import { keyframes } from '@emotion/core';

const shouldForwardProp = createShouldForwardProp([...space.propNames, ...color.propNames]);

const sx = props => css(props.sx)(props.theme);

const base = props => css(props.__css)(props.theme);

const variant = ({
  theme,
  variant,
  __themeKey: _themeKey = 'variants'
}) => css(get(theme, _themeKey + '.' + variant, get(theme, variant)));

const Box = styled('div', {
  shouldForwardProp
})({
  boxSizing: 'border-box',
  margin: 0,
  minWidth: 0
}, base, variant, space, color, sx, props => props.css);

const Flex = styled(Box)({
  display: 'flex'
});

const px = n => typeof n === 'number' ? n + 'px' : n;

const widthToColumns = (width, repeat) => Array.isArray(width) ? width.map(w => widthToColumns(w, repeat)) : !!width && `repeat(auto-${repeat}, minmax(${px(width)}, 1fr))`;

const countToColumns = n => Array.isArray(n) ? n.map(countToColumns) : !!n && (typeof n === 'number' ? `repeat(${n}, 1fr)` : n);

const Grid = React.forwardRef(({
  width,
  columns,
  gap: _gap = 3,
  repeat: _repeat = 'fit',
  ...props
}, ref) => {
  const gridTemplateColumns = !!width ? widthToColumns(width, _repeat) : countToColumns(columns);
  return /*#__PURE__*/React.createElement(Box, Object.assign({
    ref: ref
  }, props, {
    __themeKey: "grids",
    __css: {
      display: 'grid',
      gridGap: _gap,
      gridTemplateColumns
    }
  }));
});

const Button = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "button",
  variant: "primary"
}, props, {
  __themeKey: "buttons",
  __css: {
    appearance: 'none',
    display: 'inline-block',
    textAlign: 'center',
    lineHeight: 'inherit',
    textDecoration: 'none',
    fontSize: 'inherit',
    px: 3,
    py: 2,
    color: 'white',
    bg: 'primary',
    border: 0,
    borderRadius: 4
  }
})));

const Link = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "a",
  variant: "styles.a"
}, props, {
  __themeKey: "links"
})));

const Text = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  variant: "default"
}, props, {
  __themeKey: "text"
})));

const Heading = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "h2",
  variant: "heading"
}, props, {
  __themeKey: "text",
  __css: {
    fontFamily: 'heading',
    fontWeight: 'heading',
    lineHeight: 'heading'
  }
})));

const Image = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "img"
}, props, {
  __themeKey: "images",
  __css: {
    maxWidth: '100%',
    height: 'auto',
    ...props.__css
  }
})));

const Card = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  variant: "primary"
}, props, {
  __themeKey: "cards"
})));

const Label = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "label",
  variant: "label"
}, props, {
  __themeKey: "forms",
  __css: {
    width: '100%',
    display: 'flex'
  }
})));

const Input = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "input",
  variant: "input"
}, props, {
  __themeKey: "forms",
  __css: {
    display: 'block',
    width: '100%',
    p: 2,
    appearance: 'none',
    fontSize: 'inherit',
    lineHeight: 'inherit',
    border: '1px solid',
    borderRadius: 4,
    color: 'inherit',
    bg: 'transparent'
  }
})));

var SVG = (({
  size: _size = 24,
  ...props
}) => /*#__PURE__*/React.createElement(Box, Object.assign({
  as: "svg",
  xmlns: "http://www.w3.org/2000/svg",
  width: _size + '',
  height: _size + '',
  viewBox: "0 0 24 24",
  fill: "currentcolor"
}, props)));

const getProps = test => props => {
  const next = {};

  for (const key in props) {
    if (test(key || '')) next[key] = props[key];
  }

  return next;
};
const MRE = /^m[trblxy]?$/;
const getMargin = getProps(k => MRE.test(k));
const omitMargin = getProps(k => !MRE.test(k));

const DownArrow = props => /*#__PURE__*/React.createElement(SVG, props, /*#__PURE__*/React.createElement("path", {
  d: "M7 10l5 5 5-5z"
}));

const Select = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({}, getMargin(props), {
  sx: {
    display: 'flex'
  }
}), /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "select",
  variant: "select"
}, omitMargin(props), {
  __themeKey: "forms",
  __css: {
    display: 'block',
    width: '100%',
    p: 2,
    appearance: 'none',
    fontSize: 'inherit',
    lineHeight: 'inherit',
    border: '1px solid',
    borderRadius: 4,
    color: 'inherit',
    bg: 'transparent'
  }
})), /*#__PURE__*/React.createElement(DownArrow, {
  sx: {
    ml: -28,
    alignSelf: 'center',
    pointerEvents: 'none'
  }
})));

const Textarea = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "textarea",
  variant: "textarea"
}, props, {
  __themeKey: "forms",
  __css: {
    display: 'block',
    width: '100%',
    p: 2,
    appearance: 'none',
    fontSize: 'inherit',
    lineHeight: 'inherit',
    border: '1px solid',
    borderRadius: 4,
    color: 'inherit',
    bg: 'transparent'
  }
})));

const RadioChecked = props => /*#__PURE__*/React.createElement(SVG, props, /*#__PURE__*/React.createElement("path", {
  d: "M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}));

const RadioUnchecked = props => /*#__PURE__*/React.createElement(SVG, props, /*#__PURE__*/React.createElement("path", {
  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}));

const RadioIcon = props => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RadioChecked, Object.assign({}, props, {
  __css: {
    display: 'none',
    'input:checked ~ &': {
      display: 'block'
    }
  }
})), /*#__PURE__*/React.createElement(RadioUnchecked, Object.assign({}, props, {
  __css: {
    display: 'block',
    'input:checked ~ &': {
      display: 'none'
    }
  }
})));

const Radio = React.forwardRef(({
  className,
  sx,
  variant: _variant = 'radio',
  ...props
}, ref) => /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "input",
  type: "radio"
}, props, {
  sx: {
    position: 'absolute',
    opacity: 0,
    zIndex: -1,
    width: 1,
    height: 1,
    overflow: 'hidden'
  }
})), /*#__PURE__*/React.createElement(Box, {
  as: RadioIcon,
  "aria-hidden": "true",
  __themeKey: "forms",
  variant: _variant,
  className: className,
  sx: sx,
  __css: {
    // todo: system props??
    mr: 2,
    borderRadius: 9999,
    color: 'gray',
    flexShrink: 0,
    'input:checked ~ &': {
      color: 'primary'
    },
    'input:focus ~ &': {
      bg: 'highlight'
    }
  }
})));

const CheckboxChecked = props => /*#__PURE__*/React.createElement(SVG, props, /*#__PURE__*/React.createElement("path", {
  d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
}));

const CheckboxUnchecked = props => /*#__PURE__*/React.createElement(SVG, props, /*#__PURE__*/React.createElement("path", {
  d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
}));

const CheckboxIcon = props => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CheckboxChecked, Object.assign({}, props, {
  __css: {
    display: 'none',
    'input:checked ~ &': {
      display: 'block'
    }
  }
})), /*#__PURE__*/React.createElement(CheckboxUnchecked, Object.assign({}, props, {
  __css: {
    display: 'block',
    'input:checked ~ &': {
      display: 'none'
    }
  }
})));

const Checkbox = React.forwardRef(({
  className,
  sx,
  variant: _variant = 'checkbox',
  children,
  ...props
}, ref) => /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "input",
  type: "checkbox"
}, props, {
  sx: {
    position: 'absolute',
    opacity: 0,
    zIndex: -1,
    width: 1,
    height: 1,
    overflow: 'hidden'
  }
})), /*#__PURE__*/React.createElement(Box, {
  as: CheckboxIcon,
  "aria-hidden": "true",
  __themeKey: "forms",
  variant: _variant,
  className: className,
  sx: sx,
  __css: {
    mr: 2,
    borderRadius: 4,
    color: 'gray',
    flexShrink: 0,
    'input:checked ~ &': {
      color: 'primary'
    },
    'input:focus ~ &': {
      color: 'primary',
      bg: 'highlight'
    }
  }
}), children));

const thumb = {
  appearance: 'none',
  width: 16,
  height: 16,
  bg: 'currentcolor',
  border: 0,
  borderRadius: 9999,
  variant: 'forms.slider.thumb'
};
const Slider = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "input",
  type: "range",
  variant: "slider"
}, props, {
  __themeKey: "forms",
  __css: {
    display: 'block',
    width: '100%',
    height: 4,
    my: 2,
    cursor: 'pointer',
    appearance: 'none',
    borderRadius: 9999,
    color: 'inherit',
    bg: 'gray',
    ':focus': {
      outline: 'none',
      color: 'primary'
    },
    '&::-webkit-slider-thumb': thumb,
    '&::-moz-range-thumb': thumb,
    '&::-ms-thumb': thumb
  }
})));

const Field = React.forwardRef(({
  as: Control = Input,
  label,
  name,
  ...props
}, ref) => {
  return /*#__PURE__*/React.createElement(Box, getMargin(props), /*#__PURE__*/React.createElement(Label, {
    htmlFor: name
  }, label), /*#__PURE__*/React.createElement(Control, Object.assign({
    ref: ref,
    id: name,
    name: name
  }, omitMargin(props))));
});

const Progress = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "progress",
  variant: "styles.progress"
}, props, {
  __css: {
    display: 'block',
    width: '100%',
    height: '4px',
    margin: 0,
    padding: 0,
    overflow: 'hidden',
    appearance: 'none',
    color: 'primary',
    bg: 'gray',
    borderRadius: 9999,
    border: 'none',
    '&::-webkit-progress-bar': {
      bg: 'transparent'
    },
    '&::-webkit-progress-value': {
      bg: 'currentcolor'
    },
    '&::-moz-progress-bar': {
      bg: 'currentcolor'
    }
  }
})));

const Donut = React.forwardRef(({
  size: _size = 128,
  strokeWidth: _strokeWidth = 2,
  value: _value = 0,
  min: _min = 0,
  max: _max = 1,
  title,
  ...props
}, ref) => {
  const r = 16 - _strokeWidth;
  const C = 2 * r * Math.PI;
  const offset = C - (_value - _min) / (_max - _min) * C;
  return /*#__PURE__*/React.createElement(Box, Object.assign({
    ref: ref,
    as: "svg",
    viewBox: "0 0 32 32",
    width: _size,
    height: _size,
    strokeWidth: _strokeWidth,
    fill: "none",
    stroke: "currentcolor",
    role: "img",
    "aria-valuenow": _value,
    "aria-valuemin": _min,
    "aria-valuemax": _max
  }, props, {
    __css: {
      color: 'primary'
    }
  }), title && /*#__PURE__*/React.createElement("title", null, title), /*#__PURE__*/React.createElement("circle", {
    cx: 16,
    cy: 16,
    r: r,
    opacity: 1 / 8
  }), /*#__PURE__*/React.createElement("circle", {
    cx: 16,
    cy: 16,
    r: r,
    strokeDasharray: C,
    strokeDashoffset: offset,
    transform: "rotate(-90 16 16)"
  }));
});

const spin = keyframes({
  from: {
    transform: 'rotate(0deg)'
  },
  to: {
    transform: 'rotate(360deg)'
  }
});
const Spinner = React.forwardRef(({
  size: _size = 48,
  strokeWidth: _strokeWidth = 4,
  max: _max = 1,
  title: _title = 'Loading...',
  duration: _duration = 500,
  ...props
}, ref) => {
  const r = 16 - _strokeWidth;
  const C = 2 * r * Math.PI;
  const offset = C - 1 / 4 * C;
  return /*#__PURE__*/React.createElement(Box, Object.assign({
    ref: ref,
    as: "svg",
    viewBox: "0 0 32 32",
    width: _size,
    height: _size,
    strokeWidth: _strokeWidth,
    fill: "none",
    stroke: "currentcolor",
    role: "img"
  }, props, {
    __css: {
      color: 'primary',
      overflow: 'visible'
    }
  }), /*#__PURE__*/React.createElement("title", null, _title), /*#__PURE__*/React.createElement("circle", {
    cx: 16,
    cy: 16,
    r: r,
    opacity: 1 / 8
  }), /*#__PURE__*/React.createElement(Box, {
    as: "circle",
    cx: 16,
    cy: 16,
    r: r,
    strokeDasharray: C,
    strokeDashoffset: offset,
    __css: {
      transformOrigin: '50% 50%',
      animationName: spin.toString(),
      animationTimingFunction: 'linear',
      animationDuration: _duration + 'ms',
      animationIterationCount: 'infinite'
    }
  }));
});

const Avatar = React.forwardRef(({
  size: _size = 48,
  ...props
}, ref) => /*#__PURE__*/React.createElement(Image, Object.assign({
  ref: ref,
  width: _size,
  height: _size,
  variant: "avatar"
}, props, {
  __css: {
    borderRadius: 9999
  }
})));

const Badge = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  variant: "primary"
}, props, {
  __themeKey: "badges",
  __css: {
    display: 'inline-block',
    verticalAlign: 'baseline',
    fontSize: 0,
    fontWeight: 'bold',
    whiteSpace: 'nowrap',
    px: 1,
    borderRadius: 2,
    color: 'white',
    bg: 'primary'
  }
})));

const IconButton = React.forwardRef(({
  size: _size = 32,
  ...props
}, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "button",
  variant: "icon"
}, props, {
  __themeKey: "buttons",
  __css: {
    appearance: 'none',
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 1,
    width: _size,
    height: _size,
    color: 'inherit',
    bg: 'transparent',
    border: 'none',
    borderRadius: 4
  }
})));

const x = /*#__PURE__*/React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width: "24",
  height: "24",
  fill: "currentcolor",
  viewBox: "0 0 24 24"
}, /*#__PURE__*/React.createElement("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}));
const Close = React.forwardRef(({
  size: _size = 32,
  ...props
}, ref) => /*#__PURE__*/React.createElement(IconButton, Object.assign({
  ref: ref,
  title: "Close",
  "aria-label": "Close",
  variant: "close"
}, props, {
  children: x
})));

const Alert = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  variant: "primary"
}, props, {
  __themeKey: "alerts",
  __css: {
    display: 'flex',
    alignItems: 'center',
    px: 3,
    py: 2,
    fontWeight: 'bold',
    color: 'white',
    bg: 'primary',
    borderRadius: 4
  }
})));

const Divider = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  as: "hr",
  variant: "styles.hr"
}, props, {
  __css: {
    color: 'gray',
    m: 0,
    my: 2,
    border: 0,
    borderBottom: '1px solid'
  }
})));

const Embed = React.forwardRef(({
  ratio: _ratio = 16 / 9,
  src,
  frameBorder: _frameBorder = 0,
  allowFullScreen: _allowFullScreen = true,
  width: _width = 560,
  height: _height = 315,
  allow,
  ...props
}, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({}, props, {
  __css: {
    width: '100%',
    height: 0,
    paddingBottom: 100 / _ratio + '%',
    position: 'relative',
    overflow: 'hidden'
  }
}), /*#__PURE__*/React.createElement(Box, {
  ref: ref,
  as: "iframe",
  src: src,
  width: _width,
  height: _height,
  frameBorder: _frameBorder,
  allowFullScreen: _allowFullScreen,
  allow: allow,
  __css: {
    position: 'absolute',
    width: '100%',
    height: '100%',
    top: 0,
    bottom: 0,
    left: 0,
    border: 0
  }
})));

const AspectRatio = React.forwardRef(({
  ratio: _ratio = 4 / 3,
  children,
  ...props
}, ref) => /*#__PURE__*/React.createElement(Box, {
  ref: ref,
  sx: {
    position: 'relative',
    overflow: 'hidden'
  }
}, /*#__PURE__*/React.createElement(Box, {
  sx: {
    width: '100%',
    height: 0,
    paddingBottom: 100 / _ratio + '%'
  }
}), /*#__PURE__*/React.createElement(Box, Object.assign({}, props, {
  __css: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }
}), children)));

const AspectImage = React.forwardRef(({
  ratio,
  ...props
}, ref) => /*#__PURE__*/React.createElement(AspectRatio, {
  ratio: ratio
}, /*#__PURE__*/React.createElement(Image, Object.assign({
  ref: ref
}, props, {
  __css: {
    objectFit: 'cover'
  }
}))));

const Container = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref,
  variant: "container"
}, props, {
  __themeKey: "layout",
  __css: {
    width: '100%',
    maxWidth: 'container',
    mx: 'auto'
  }
})));

const NavLink = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Link, Object.assign({
  ref: ref,
  variant: "nav"
}, props, {
  __css: {
    color: 'inherit',
    textDecoration: 'none',
    fontWeight: 'bold',
    display: 'inline-block',
    '&:hover, &:focus, &.active': {
      color: 'primary'
    }
  }
})));

const Message = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Box, Object.assign({
  ref: ref
}, props, {
  __themeKey: "messages",
  __css: {
    padding: 3,
    paddingLeft: t => t.space[3] - t.space[1],
    borderLeftWidth: t => t.space[1],
    borderLeftStyle: 'solid',
    borderLeftColor: 'primary',
    borderRadius: 4,
    bg: 'highlight'
  }
})));

const MenuIcon = ({
  size: _size = 24
}) => /*#__PURE__*/React.createElement(Box, {
  as: "svg",
  xmlns: "http://www.w3.org/2000/svg",
  width: _size,
  height: _size,
  fill: "currentcolor",
  viewBox: "0 0 24 24",
  sx: {
    display: 'block',
    margin: 0
  }
}, /*#__PURE__*/React.createElement("path", {
  d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
}));
const MenuButton = React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(IconButton, Object.assign({
  ref: ref,
  title: "Menu",
  "aria-label": "Toggle Menu",
  variant: "menu"
}, props), /*#__PURE__*/React.createElement(MenuIcon, null)));

export { Alert, AspectImage, AspectRatio, Avatar, Badge, Box, Button, Card, Checkbox, Close, Container, Divider, Donut, Embed, Field, Flex, Grid, Heading, IconButton, Image, Input, Label, Link, MenuButton, Message, NavLink, Progress, Radio, Select, Slider, Spinner, Text, Textarea };
//# sourceMappingURL=index.modern.js.map
