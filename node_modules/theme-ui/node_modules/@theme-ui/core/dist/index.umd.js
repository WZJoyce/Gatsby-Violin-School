(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@emotion/core'), require('@theme-ui/css'), require('react'), require('deepmerge'), require('@emotion/core/package.json')) :
  typeof define === 'function' && define.amd ? define(['exports', '@emotion/core', '@theme-ui/css', 'react', 'deepmerge', '@emotion/core/package.json'], factory) :
  (global = global || self, factory(global.core = {}, global.core, global.css, global.react, global.deepmerge, global.packageInfo));
}(this, (function (exports, core, css, React, deepmerge, packageInfo) {
  deepmerge = deepmerge && Object.prototype.hasOwnProperty.call(deepmerge, 'default') ? deepmerge['default'] : deepmerge;
  packageInfo = packageInfo && Object.prototype.hasOwnProperty.call(packageInfo, 'default') ? packageInfo['default'] : packageInfo;

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  var __EMOTION_VERSION__ = packageInfo.version;

  var getCSS = function getCSS(props) {
    if (!props.sx && !props.css) return undefined;
    return function (theme) {
      var styles = css.css(props.sx)(theme);
      var raw = typeof props.css === 'function' ? props.css(theme) : props.css;
      return [styles, raw];
    };
  };

  var parseProps = function parseProps(props) {
    if (!props) return null;
    var next = {};

    for (var key in props) {
      if (key === 'sx') continue;
      next[key] = props[key];
    }

    var css = getCSS(props);
    if (css) next.css = css;
    return next;
  };

  var jsx = function jsx(type, props) {
    return core.jsx.apply(undefined, [type, parseProps(props)].concat([].slice.call(arguments, 2)));
  };
  var Context = React.createContext({
    __EMOTION_VERSION__: __EMOTION_VERSION__,
    theme: {}
  });
  var useThemeUI = function useThemeUI() {
    return React.useContext(Context);
  };
  var canUseSymbol = typeof Symbol === 'function' && Symbol["for"];
  var REACT_ELEMENT = canUseSymbol ? Symbol["for"]('react.element') : 0xeac7;
  var FORWARD_REF = canUseSymbol ? Symbol["for"]('react.forward_ref') : 0xeac7;

  var isMergeableObject = function isMergeableObject(n) {
    return !!n && typeof n === 'object' && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;
  };

  var arrayMerge = function arrayMerge(destinationArray, sourceArray, options) {
    return sourceArray;
  };
  /**
   * Deeply merge themes
   */


  var merge = function merge(a, b) {
    return deepmerge(a, b, {
      isMergeableObject: isMergeableObject,
      arrayMerge: arrayMerge
    });
  };

  function mergeAll() {
    return deepmerge.all([].slice.call(arguments), {
      isMergeableObject: isMergeableObject,
      arrayMerge: arrayMerge
    });
  }

  merge.all = mergeAll;

  var BaseProvider = function BaseProvider(_ref) {
    var context = _ref.context,
        children = _ref.children;
    return jsx(core.ThemeContext.Provider, {
      value: context.theme
    }, jsx(Context.Provider, {
      value: context,
      children: children
    }));
  };

  function ThemeProvider(_ref2) {
    var theme = _ref2.theme,
        children = _ref2.children;
    var outer = useThemeUI();

    if (process.env.NODE_ENV !== 'production') {
      if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {
        console.warn('Multiple versions of Emotion detected,', 'and theming might not work as expected.', 'Please ensure there is only one copy of @emotion/core installed in your application.');
      }
    }

    var context = typeof theme === 'function' ? _extends({}, outer, {
      theme: theme(outer.theme)
    }) : merge.all({}, outer, {
      theme: theme
    });
    return jsx(BaseProvider, {
      context: context
    }, children);
  }

  exports.Context = Context;
  exports.ThemeProvider = ThemeProvider;
  exports.jsx = jsx;
  exports.merge = merge;
  exports.useThemeUI = useThemeUI;

})));
//# sourceMappingURL=index.umd.js.map
